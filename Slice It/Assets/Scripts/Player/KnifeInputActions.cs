//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Scripts/Player/KnifeInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace SliceIt.Knife
{
    public partial class @KnifeInputActions : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @KnifeInputActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""KnifeInputActions"",
    ""maps"": [
        {
            ""name"": ""Shoot"",
            ""id"": ""99f592a9-194c-4326-8223-8f5ffdf7ed64"",
            ""actions"": [
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""b960c054-a6c2-4382-8716-0c0ef477b31a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3284bf99-16f7-4bdc-9813-4235e33a2f10"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bec762d8-5bcd-4696-9640-d56a63ec9b4c"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Shoot
            m_Shoot = asset.FindActionMap("Shoot", throwIfNotFound: true);
            m_Shoot_Shoot = m_Shoot.FindAction("Shoot", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Shoot
        private readonly InputActionMap m_Shoot;
        private IShootActions m_ShootActionsCallbackInterface;
        private readonly InputAction m_Shoot_Shoot;
        public struct ShootActions
        {
            private @KnifeInputActions m_Wrapper;
            public ShootActions(@KnifeInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Shoot => m_Wrapper.m_Shoot_Shoot;
            public InputActionMap Get() { return m_Wrapper.m_Shoot; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(ShootActions set) { return set.Get(); }
            public void SetCallbacks(IShootActions instance)
            {
                if (m_Wrapper.m_ShootActionsCallbackInterface != null)
                {
                    @Shoot.started -= m_Wrapper.m_ShootActionsCallbackInterface.OnShoot;
                    @Shoot.performed -= m_Wrapper.m_ShootActionsCallbackInterface.OnShoot;
                    @Shoot.canceled -= m_Wrapper.m_ShootActionsCallbackInterface.OnShoot;
                }
                m_Wrapper.m_ShootActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Shoot.started += instance.OnShoot;
                    @Shoot.performed += instance.OnShoot;
                    @Shoot.canceled += instance.OnShoot;
                }
            }
        }
        public ShootActions @Shoot => new ShootActions(this);
        public interface IShootActions
        {
            void OnShoot(InputAction.CallbackContext context);
        }
    }
}
