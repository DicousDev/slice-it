//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Scripts/GameInput/StartAndEndGameInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace SliceIt.GameInput
{
    public partial class @StartAndEndGameInput : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @StartAndEndGameInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""StartAndEndGameInput"",
    ""maps"": [
        {
            ""name"": ""StartEnd"",
            ""id"": ""d58bcfe4-2257-4126-a1ec-ba323b009a9b"",
            ""actions"": [
                {
                    ""name"": ""StartEnd"",
                    ""type"": ""Button"",
                    ""id"": ""dda9572b-d584-4900-ba9d-d46a5c592007"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""68fa0b8a-57e9-499d-a816-3d99ee613192"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StartEnd"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3f1ecf8a-2cf7-411e-8a18-51f08877f8b1"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StartEnd"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // StartEnd
            m_StartEnd = asset.FindActionMap("StartEnd", throwIfNotFound: true);
            m_StartEnd_StartEnd = m_StartEnd.FindAction("StartEnd", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // StartEnd
        private readonly InputActionMap m_StartEnd;
        private IStartEndActions m_StartEndActionsCallbackInterface;
        private readonly InputAction m_StartEnd_StartEnd;
        public struct StartEndActions
        {
            private @StartAndEndGameInput m_Wrapper;
            public StartEndActions(@StartAndEndGameInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @StartEnd => m_Wrapper.m_StartEnd_StartEnd;
            public InputActionMap Get() { return m_Wrapper.m_StartEnd; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(StartEndActions set) { return set.Get(); }
            public void SetCallbacks(IStartEndActions instance)
            {
                if (m_Wrapper.m_StartEndActionsCallbackInterface != null)
                {
                    @StartEnd.started -= m_Wrapper.m_StartEndActionsCallbackInterface.OnStartEnd;
                    @StartEnd.performed -= m_Wrapper.m_StartEndActionsCallbackInterface.OnStartEnd;
                    @StartEnd.canceled -= m_Wrapper.m_StartEndActionsCallbackInterface.OnStartEnd;
                }
                m_Wrapper.m_StartEndActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @StartEnd.started += instance.OnStartEnd;
                    @StartEnd.performed += instance.OnStartEnd;
                    @StartEnd.canceled += instance.OnStartEnd;
                }
            }
        }
        public StartEndActions @StartEnd => new StartEndActions(this);
        public interface IStartEndActions
        {
            void OnStartEnd(InputAction.CallbackContext context);
        }
    }
}
